<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [IRControl\IRControl.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image IRControl\IRControl.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sat Apr 20 09:04:22 2024
<BR><P>
<H3>Maximum Stack Usage =        192 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; system_run &rArr; Task2_uart_rs485 &rArr; MBS_CorePoll &rArr; MBS_CoreAnalyze &rArr; MBS_Function01H &rArr; MBS_PortSendAck &rArr; MBS_PortSendWithCRC &rArr; MBS_PhysicalSendBuff &rArr; UartMbsSendData
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[10]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC1_IRQHandler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[e]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[f]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[17]">I2C1_IRQHandler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[9]">RCC_IRQHandler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[18]">SPI1_IRQHandler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32f0xx_it.o(i.SysTick_Handler) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[1d]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f070x6.o(.text)
 <LI><a href="#[14]">TIM14_IRQHandler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[15]">TIM16_IRQHandler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[16]">TIM17_IRQHandler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[11]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[12]">TIM1_CC_IRQHandler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[13]">TIM3_IRQHandler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[19]">USART1_IRQHandler</a> from stm32f0xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[1a]">USART2_IRQHandler</a> from stm32f0xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[1b]">USB_IRQHandler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32f070x6.o(.text) referenced from startup_stm32f070x6.o(RESET)
 <LI><a href="#[1e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f070x6.o(.text)
 <LI><a href="#[20]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[1f]">fputc</a> from stm32f0xx_it.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[23]">handleIsBleMode</a> from ble_driver.o(i.handleIsBleMode) referenced from ble_driver.o(.data)
 <LI><a href="#[22]">handleIsConnected</a> from ble_driver.o(i.handleIsConnected) referenced from ble_driver.o(.data)
 <LI><a href="#[26]">handleM1</a> from ble_driver.o(i.handleM1) referenced from ble_driver.o(.data)
 <LI><a href="#[27]">handleM2</a> from ble_driver.o(i.handleM2) referenced from ble_driver.o(.data)
 <LI><a href="#[2a]">handleMK</a> from ble_driver.o(i.handleMK) referenced from ble_driver.o(.data)
 <LI><a href="#[28]">handleMP</a> from ble_driver.o(i.handleMP) referenced from ble_driver.o(.data)
 <LI><a href="#[29]">handleMT</a> from ble_driver.o(i.handleMT) referenced from ble_driver.o(.data)
 <LI><a href="#[21]">handleOK</a> from ble_driver.o(i.handleOK) referenced from ble_driver.o(.data)
 <LI><a href="#[24]">handleSearchMode</a> from ble_driver.o(i.handleSearchMode) referenced from ble_driver.o(.data)
 <LI><a href="#[25]">handleTQ</a> from ble_driver.o(i.handleTQ) referenced from ble_driver.o(.data)
 <LI><a href="#[1c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3c]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[91]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[92]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[93]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2d]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_fini_ (Weak Reference)
</UL>

<P><STRONG><a name="[94]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[95]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f070x6.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_config
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbs_data_process
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedCtrl
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task2_uart_rs485
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task1_uart_ble
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task2_uart_rs485
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task1_uart_ble
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_timeout_process
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_Function01H
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[40]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCommand
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleCmdSend
</UL>

<P><STRONG><a name="[4e]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleTQ
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapPacketCheck
</UL>

<P><STRONG><a name="[83]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCommand
</UL>

<P><STRONG><a name="[8c]"></a>strtok</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseAndHandleCommand
</UL>

<P><STRONG><a name="[34]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleTQ
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[35]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[36]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[2c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[9d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[9e]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[9f]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[3d]"></a>BleCmdSend</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, ble_driver.o(i.BleCmdSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BleCmdSend &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartBleSendData
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleTQ
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleIsBleMode
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_config
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbs_data_process
</UL>

<P><STRONG><a name="[7a]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_halfword
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[42]"></a>FLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f0xx_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[45]"></a>FLASH_GetStatus</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f0xx_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[7b]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_halfword
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[44]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f0xx_flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_halfword
</UL>

<P><STRONG><a name="[79]"></a>FLASH_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_halfword
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>

<P><STRONG><a name="[43]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f0xx_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[8a]"></a>FlashDataRead</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, bsp_driver.o(i.FlashDataRead))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>FlashDataSave</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, bsp_driver.o(i.FlashDataSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FlashDataSave &rArr; flash_write &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_config
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbs_data_process
</UL>

<P><STRONG><a name="[81]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[80]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[51]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbs_data_process
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedCtrl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMbsSendData
</UL>

<P><STRONG><a name="[52]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbs_data_process
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedCtrl
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMbsSendData
</UL>

<P><STRONG><a name="[69]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMonitor
</UL>

<P><STRONG><a name="[53]"></a>MBS_CoreAnalyze</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, modbus_core.o(i.MBS_CoreAnalyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MBS_CoreAnalyze &rArr; MBS_Function01H &rArr; MBS_PortSendAck &rArr; MBS_PortSendWithCRC &rArr; MBS_PhysicalSendBuff &rArr; UartMbsSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_Function10H
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_Function0FH
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_Function06H
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_Function05H
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_Function03H
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_Function01H
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_PortSendAck
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_CorePoll
</UL>

<P><STRONG><a name="[5b]"></a>MBS_CorePoll</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, modbus_core.o(i.MBS_CorePoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MBS_CorePoll &rArr; MBS_CoreAnalyze &rArr; MBS_Function01H &rArr; MBS_PortSendAck &rArr; MBS_PortSendWithCRC &rArr; MBS_PhysicalSendBuff &rArr; UartMbsSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_crc16
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_CoreAnalyze
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task2_uart_rs485
</UL>

<P><STRONG><a name="[54]"></a>MBS_Function01H</STRONG> (Thumb, 352 bytes, Stack size 96 bytes, modbus_hook.o(i.MBS_Function01H))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MBS_Function01H &rArr; MBS_PortSendAck &rArr; MBS_PortSendWithCRC &rArr; MBS_PhysicalSendBuff &rArr; UartMbsSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_MemReadCoilState
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_PortSendWithCRC
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_PortSendAck
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_CoreAnalyze
</UL>

<P><STRONG><a name="[55]"></a>MBS_Function03H</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, modbus_hook.o(i.MBS_Function03H))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MBS_Function03H &rArr; MBS_PortSendAck &rArr; MBS_PortSendWithCRC &rArr; MBS_PhysicalSendBuff &rArr; UartMbsSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_MemReadHoldRegValue
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_PortSendWithCRC
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_PortSendAck
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_CoreAnalyze
</UL>

<P><STRONG><a name="[56]"></a>MBS_Function05H</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, modbus_hook.o(i.MBS_Function05H))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MBS_Function05H &rArr; MBS_PortSendAck &rArr; MBS_PortSendWithCRC &rArr; MBS_PhysicalSendBuff &rArr; UartMbsSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_MemWriteCoilState
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_PortSendAck
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_CoreAnalyze
</UL>

<P><STRONG><a name="[57]"></a>MBS_Function06H</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, modbus_hook.o(i.MBS_Function06H))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MBS_Function06H &rArr; MBS_PortSendAck &rArr; MBS_PortSendWithCRC &rArr; MBS_PhysicalSendBuff &rArr; UartMbsSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_MemWriteHoldRegValue
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_PortSendAck
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_CoreAnalyze
</UL>

<P><STRONG><a name="[58]"></a>MBS_Function0FH</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, modbus_hook.o(i.MBS_Function0FH))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MBS_Function0FH &rArr; MBS_PortSendAck &rArr; MBS_PortSendWithCRC &rArr; MBS_PhysicalSendBuff &rArr; UartMbsSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_MemWriteCoilsState
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_PortSendAck
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_CoreAnalyze
</UL>

<P><STRONG><a name="[59]"></a>MBS_Function10H</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, modbus_hook.o(i.MBS_Function10H))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MBS_Function10H &rArr; MBS_PortSendAck &rArr; MBS_PortSendWithCRC &rArr; MBS_PhysicalSendBuff &rArr; UartMbsSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_MemWriteHoldRegValue
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_PortSendAck
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_CoreAnalyze
</UL>

<P><STRONG><a name="[65]"></a>MBS_MappingCoilInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modbus_user.o(i.MBS_MappingCoilInit))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_MappingInit
</UL>

<P><STRONG><a name="[66]"></a>MBS_MappingHoldRegInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modbus_user.o(i.MBS_MappingHoldRegInit))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_MappingInit
</UL>

<P><STRONG><a name="[64]"></a>MBS_MappingInit</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, modbus_user.o(i.MBS_MappingInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MBS_MappingInit
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_MappingHoldRegInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_MappingCoilInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>MBS_MemReadCoilState</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, modbus_user.o(i.MBS_MemReadCoilState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MBS_MemReadCoilState
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_Function01H
</UL>

<P><STRONG><a name="[60]"></a>MBS_MemReadHoldRegValue</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, modbus_user.o(i.MBS_MemReadHoldRegValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MBS_MemReadHoldRegValue
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_Function03H
</UL>

<P><STRONG><a name="[61]"></a>MBS_MemWriteCoilState</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, modbus_user.o(i.MBS_MemWriteCoilState))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MBS_MemWriteCoilState
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_Function05H
</UL>

<P><STRONG><a name="[63]"></a>MBS_MemWriteCoilsState</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, modbus_user.o(i.MBS_MemWriteCoilsState))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MBS_MemWriteCoilsState
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_Function0FH
</UL>

<P><STRONG><a name="[62]"></a>MBS_MemWriteHoldRegValue</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, modbus_user.o(i.MBS_MemWriteHoldRegValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MBS_MemWriteHoldRegValue
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_Function10H
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_Function06H
</UL>

<P><STRONG><a name="[67]"></a>MBS_PhysicalSendBuff</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, modbus_core.o(i.MBS_PhysicalSendBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MBS_PhysicalSendBuff &rArr; UartMbsSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMbsSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_PortSendWithCRC
</UL>

<P><STRONG><a name="[5a]"></a>MBS_PortSendAck</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, modbus_core.o(i.MBS_PortSendAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MBS_PortSendAck &rArr; MBS_PortSendWithCRC &rArr; MBS_PhysicalSendBuff &rArr; UartMbsSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_PortSendWithCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_Function10H
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_Function0FH
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_Function06H
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_Function05H
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_Function03H
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_Function01H
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_CoreAnalyze
</UL>

<P><STRONG><a name="[5f]"></a>MBS_PortSendWithCRC</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, modbus_core.o(i.MBS_PortSendWithCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MBS_PortSendWithCRC &rArr; MBS_PhysicalSendBuff &rArr; UartMbsSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mb_crc16
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_PhysicalSendBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_Function03H
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_Function01H
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_PortSendAck
</UL>

<P><STRONG><a name="[8f]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f0xx_misc.o(i.NVIC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[7f]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[8e]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[8d]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[87]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_syscfg.o(i.SYSCFG_MemoryRemapConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, system_stm32f0xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d]"></a>SystemInit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, system_stm32f0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(.text)
</UL>
<P><STRONG><a name="[19]"></a>USART1_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.USART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>USART2_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.USART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f070x6.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>USART_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[7c]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[41]"></a>UartBleSendData</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bsp_driver.o(i.UartBleSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UartBleSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleCmdSend
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task2_uart_rs485
</UL>

<P><STRONG><a name="[4c]"></a>UartMbsSendData</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bsp_driver.o(i.UartMbsSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UartMbsSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_timeout_process
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapPacketCheck
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapCheck
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_PhysicalSendBuff
</UL>

<P><STRONG><a name="[74]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a0]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[3f]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleTQ
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSearchMode
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleOK
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMT
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMP
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleM2
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleM1
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleIsConnected
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleIsBleMode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCommand
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseAndHandleCommand
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleCmdSend
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task2_uart_rs485
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task1_uart_ble
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_halfword
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapCheck
</UL>

<P><STRONG><a name="[76]"></a>__0sprintf$8</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a1]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[85]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleTQ
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_config
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbs_data_process
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[a2]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[a3]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[a4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[a5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[84]"></a>ascii2int</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, ble_driver.o(i.ascii2int))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ascii2int
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSearchMode
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMT
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMP
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMK
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleM2
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleM1
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleIsConnected
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleIsBleMode
</UL>

<P><STRONG><a name="[4b]"></a>delay_ms</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbs_data_process
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapCheck
</UL>

<P><STRONG><a name="[47]"></a>flash_erase</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bsp_driver.o(i.flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flash_erase &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapPacketCheck
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDataSave
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapCheck
</UL>

<P><STRONG><a name="[48]"></a>flash_write</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bsp_driver.o(i.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = flash_write &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDataSave
</UL>

<P><STRONG><a name="[4a]"></a>flash_write_halfword</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bsp_driver.o(i.flash_write_halfword))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flash_write_halfword &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapPacketCheck
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapCheck
</UL>

<P><STRONG><a name="[1f]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f0xx_it.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[7e]"></a>gpio_init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, bsp_driver.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gpio_init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>handleCommand</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, ble_driver.o(i.handleCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = handleCommand &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseAndHandleCommand
</UL>

<P><STRONG><a name="[23]"></a>handleIsBleMode</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ble_driver.o(i.handleIsBleMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = handleIsBleMode &rArr; BleCmdSend &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii2int
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleCmdSend
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_driver.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>handleIsConnected</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ble_driver.o(i.handleIsConnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = handleIsConnected &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii2int
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_driver.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>handleM1</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_driver.o(i.handleM1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = handleM1 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii2int
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_driver.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>handleM2</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_driver.o(i.handleM2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = handleM2 &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii2int
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_driver.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>handleMK</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ble_driver.o(i.handleMK))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = handleMK &rArr; ascii2int
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii2int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_driver.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>handleMP</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ble_driver.o(i.handleMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = handleMP &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii2int
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_driver.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>handleMT</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_driver.o(i.handleMT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = handleMT &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii2int
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_driver.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>handleOK</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ble_driver.o(i.handleOK))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = handleOK &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_driver.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>handleSearchMode</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ble_driver.o(i.handleSearchMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = handleSearchMode &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ascii2int
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_driver.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>handleTQ</STRONG> (Thumb, 370 bytes, Stack size 72 bytes, ble_driver.o(i.handleTQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = handleTQ &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleCmdSend
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_driver.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>main</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = main &rArr; system_run &rArr; Task2_uart_rs485 &rArr; MBS_CorePoll &rArr; MBS_CoreAnalyze &rArr; MBS_Function01H &rArr; MBS_PortSendAck &rArr; MBS_PortSendWithCRC &rArr; MBS_PhysicalSendBuff &rArr; UartMbsSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_run
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_MemoryRemapConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_MappingInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDataRead
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapCheck
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[5c]"></a>mb_crc16</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, modbus_crc.o(i.mb_crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mb_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_CorePoll
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_PortSendWithCRC
</UL>

<P><STRONG><a name="[3e]"></a>millis</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.millis))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleTQ
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleSearchMode
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleOK
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMT
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleMP
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleM2
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleM1
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleIsConnected
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleIsBleMode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCommand
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseAndHandleCommand
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleCmdSend
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task3_period_process
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task2_uart_rs485
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task1_uart_ble
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_halfword
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapCheck
</UL>

<P><STRONG><a name="[6e]"></a>parseAndHandleCommand</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ble_driver.o(i.parseAndHandleCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = parseAndHandleCommand &rArr; handleCommand &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleCommand
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task1_uart_ble
</UL>

<P><STRONG><a name="[8b]"></a>system_run</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app.o(i.system_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = system_run &rArr; Task2_uart_rs485 &rArr; MBS_CorePoll &rArr; MBS_CoreAnalyze &rArr; MBS_Function01H &rArr; MBS_PortSendAck &rArr; MBS_PortSendWithCRC &rArr; MBS_PhysicalSendBuff &rArr; UartMbsSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task3_period_process
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task2_uart_rs485
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task1_uart_ble
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>uart_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bsp_driver.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6b]"></a>SetSysClock</STRONG> (Thumb, 322 bytes, Stack size 12 bytes, system_stm32f0xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[49]"></a>IapCheck</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, main.o(i.IapCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IapCheck &rArr; flash_write_halfword &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_halfword
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMbsSendData
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, main.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>IapPacketCheck</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, app.o(i.IapPacketCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IapPacketCheck &rArr; flash_write_halfword &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_halfword
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMbsSendData
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task2_uart_rs485
</UL>

<P><STRONG><a name="[50]"></a>LedCtrl</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, app.o(i.LedCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LedCtrl &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task3_period_process
</UL>

<P><STRONG><a name="[4f]"></a>NVIC_SystemReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbs_data_process
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_timeout_process
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMonitor
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapPacketCheck
</UL>

<P><STRONG><a name="[68]"></a>SysMonitor</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app.o(i.SysMonitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysMonitor
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task3_period_process
</UL>

<P><STRONG><a name="[6c]"></a>Task1_uart_ble</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, app.o(i.Task1_uart_ble))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Task1_uart_ble &rArr; parseAndHandleCommand &rArr; handleCommand &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseAndHandleCommand
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_run
</UL>

<P><STRONG><a name="[6f]"></a>Task2_uart_rs485</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, app.o(i.Task2_uart_rs485))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Task2_uart_rs485 &rArr; MBS_CorePoll &rArr; MBS_CoreAnalyze &rArr; MBS_Function01H &rArr; MBS_PortSendAck &rArr; MBS_PortSendWithCRC &rArr; MBS_PhysicalSendBuff &rArr; UartMbsSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBS_CorePoll
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapPacketCheck
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartBleSendData
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_run
</UL>

<P><STRONG><a name="[70]"></a>Task3_period_process</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, app.o(i.Task3_period_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Task3_period_process &rArr; mbs_data_process &rArr; FlashDataSave &rArr; flash_write &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_config
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbs_data_process
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ymodem_timeout_process
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysMonitor
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedCtrl
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_run
</UL>

<P><STRONG><a name="[73]"></a>Ymodem_timeout_process</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, app.o(i.Ymodem_timeout_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ymodem_timeout_process &rArr; UartMbsSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartMbsSendData
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task3_period_process
</UL>

<P><STRONG><a name="[71]"></a>mbs_data_process</STRONG> (Thumb, 514 bytes, Stack size 56 bytes, app.o(i.mbs_data_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbs_data_process &rArr; FlashDataSave &rArr; flash_write &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleCmdSend
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDataSave
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task3_period_process
</UL>

<P><STRONG><a name="[72]"></a>music_config</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, app.o(i.music_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = music_config &rArr; FlashDataSave &rArr; flash_write &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleCmdSend
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashDataSave
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task3_period_process
</UL>

<P><STRONG><a name="[75]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[78]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[77]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[20]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[2e]"></a>__arm_fini_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_fini
</UL>
<HR></body></html>
